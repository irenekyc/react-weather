import React, {useState, useEffect} from 'react'
import style from './layout.module.css'
import SearchBar from '../SearchBar/SearchBar'
import WeatherInfo from '../WeatherInfo/WeatherInfo'
import AddressInfo from '../AddressInfo/AddressInfo'
import UnitOption from '../UnitOption/UnitOption'

const Layout = ()=>{
    const [position, setPosition] = useState({})
    const [error, setError] = useState(null)
    const [weather, setWeather] = useState({})

    const [searchAddress, setSearchAddress]= useState(" ")
    const [searchLocations, setSearchLocations]= useState({})
    
    const [showHourly, setShowHourly] = useState(false)
    const [showDaily, setShowDaily] = useState(false)


    const MAPAPI = process.env.REACT_APP_MAP_API_KEY

  
    useEffect(() => {
        const geo = navigator.geolocation;
        if (!geo) {
          setError('Geolocation is not supported');
          return;
        }
        const watcher = geo.watchPosition(onChange, onError);
        return () => geo.clearWatch(watcher);
    }, []);



    const getSearchAddress = (event)=>{
        setSearchAddress(event.target.value)
    }

    const getLocations = async ()=>{
      let GEOURL = ""
      if(searchAddress){
       GEOURL = `https://api.mapbox.com/geocoding/v5/mapbox.places/${searchAddress}.json?types=place&access_token=${MAPAPI}`}
      const response = await fetch(GEOURL)
      const data = await response.json()
      const locations = data.features
      setSearchLocations({
        address: locations,
        ready: true
      })
    }
    }

    const getWeatherData = async (location)=>{
        const CorsFixed = `https://cors-anywhere.herokuapp.com/`
        const WeatherAPIKEY = process.env.REACT_APP_DARKSKYAPI_KEY
        const URL = `${CorsFixed}https://api.darksky.net/forecast/${WeatherAPIKEY}/${location.lat},${location.long}?units=${weather.unit}`
        const response= await fetch(URL)
        const data = await response.json()
        setWeather({
          data: data, 
          ready: true})

        if (!location.city){
          getCity(location)
        } else {
          setWeather({
            city: location.city
          })
        }
    }

    // const fetchData = async ()=>{
    //     if (position.longitude && position.latitude){
    //         const URL = `${WEATHERURL}${position.latitude},${position.longitude}?units=${unit}`
    //         const response= await fetch(URL)
    //         const data = await response.json()
    //         setWeatherdata({data})
    //         setWeatherdataReady(true)       
    //     }
    //    
    // }

   
    const getCity = async (position)=>{
      const GEOURL = `https://api.mapbox.com/geocoding/v5/mapbox.places/${position.long},${position.lat}.json?types=place&access_token=${MAPAPI}&limit=1`
      const response = await fetch(GEOURL)
      const data = await response.json()
      setWeather({
        city: data.features[0].place_name,})
    }

    const getUnit = ()=>{
      const curUnit = weather.unit
      if (curUnit === "us"){
        setWeather({
          unit: "us"})
      }
      if (curUnit === "si"){
        setWeather({
          unit: "us"})
      }
    }

    const hourlyForecastHandler = ()=>{
      if (showHourly === false){
        setShowHourly(true)
      } else if (showHourly === true){
        setShowHourly(false)
      }
    }
    const dailyForecastHandler = ()=>{
      if (showDaily === false){
        setShowDaily(true)
      } else if (showDaily === true){
        setShowDaily(false)
      }
    }


     return(
        <div className={style.WebContainer}> 

            <div className={style.NavBar}>
              <div className={style.FloatLEFT}>
              <span className={style.heading}> Weather Forecast </span><span className={style.Normal}> Design by Irene K.</span> 
              </div>
              <div className = {style.FloatRIGHT}>
              <UnitOption 
              unitChange = {getUnit}
              curUnit={unit}/>
              </div>
            </div>

            <div className={style.SearchBar}>
              <SearchBar 
              currentLocation = {(position)=> getWeatherData (position)}
              searchLocation = {getLocations}
              searchQuery = {getSearchAddress}/>
            </div>

            <div className={style.MainContent}>
            <WeatherInfo 
              ready = {weatherdataReady}
              data = {weatherdata}
              city={searchLocation}
              unit = {unit}
              hourlyBtn = {hourlyForecastHandler}
              showHourly = {showHourly}
              dailyBtn = {dailyForecastHandler}
              showDaily = {showDaily}/>
              <AddressInfo 
              locations = {SearchLocations.address}
              ready={SearchLocations.ready}
              confirmedLocation = {(location)=> getWeatherData(location)}
              />
            </div>

        </div>
     )
     

export default Layout